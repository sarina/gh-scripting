#!/usr/bin/env python3
"""
Usage:
    python -m replace_string_with_another.py

Requires:
    GITHUB_AUTH token in local environment

Description:
    For each repo in your org, looks for a given string. If
    the string exists, switches to a new branch, replaces the
    string with a new string, commits changes, and opens a PR.
    Everything currently hard-coded.
"""

import datetime
import json
import logging
import os
import requests
import subprocess
import sys
import time

from ghelpers import *


# Switch to DEBUG for additional debugging info
logging.basicConfig(stream=sys.stderr, level=logging.INFO)
LOG = logging.getLogger(__name__)

def main(org, root_dir, string_to_find, string_to_replace, exclude_private=False, interactive=False):
    """
    Goes through all repos in an org, clones them (or switches to the default
    branch and then pulls latest changes), searches for the specified string, if
    found makes a new branch, switches the string with the new string, creates a
    pull request.

    * org (str): GitHub organization
    * root_dir (str): path to directory to clone repos (on Mac, may look like
      `/Users/<uname>/path/to/dir`
    * string_to_find: what string we're looking to see if each repo has
    * string_to_replace: if string_to_find is found, what we should replace it with
    * exclude_private (bool): if True, script skips private repos (default
      False)
    * interactive (bool): if True, pauses before committing files upstream and
      awaits user confirmation
    """
    gh_headers = get_github_headers()
    branch_name = "tcril/fix-gh-org-url"
    commit_msg = "fix: fix github url strings (org edx -> openedx)"
    pr_details = {
        "title": "Fix github url strings (org edx -> openedx)",
        "body": "## This PR was autogenerated\n\nThis pr replaces the old GitHub organization, github.com/edx, with the new GitHub organization, github.com/openedx.\n\nTagging @openedx/tcril-engineering for review, but others are welcome to provide review.\n\nRef: https://github.com/openedx/tcril-engineering/issues/42"
    }

    prs = []
    pr_failed = []
    repos_skipped = []

    for repo_data in get_repos(gh_headers, org, exclude_private):
        (rname, ssh_url, dbranch, has_issues, count) = repo_data
        LOG.info("\n\n******* CHECKING REPO: {} ({}) ************".format(rname, count))

        repo_path = get_repo_path(rname, root_dir)
        # clone repo; if exists, checkout the default branch & pull latest
        clone_repo(root_dir, repo_path, ssh_url, dbranch)

        # TODO: Search for the string; fail fast if none exist
        if not found(string_to_find):
            LOG.info("Did not find string {}".format(string_to_find))

        if not new_branch(repo_path, branch_name):
            # this branch already exists
            LOG.info("Skipping {}, branch already exists".format(rname))
            repos_skipped.append([rname, "branch exists"])
            continue

        # TODO: Swap old string for new string
        swap_strings(string_to_find, string_to_replace)

        if interactive:
            try:
                interactive_commit(repo_path)
            except RepoError:
                # move on to next repo
                continue

        make_commit(repo_path, commit_msg)
        try:
            pr_url = make_pr(gh_headers, org, rname, branch_name, dbranch, pr_details)
            prs.append(pr_url)
        except PrCreationError as pr_err:
            LOG.info(pr_err.__str__())
            # info you need to retry
            pr_failed.append((org, rname, branch_name, dbranch, pr_details))
        # Without, you hit secondary rate limits if you have more than ~30
        # repos. I tried 3, too short. 30, totally worked. there's a good number
        # in between that i'm sure
        time.sleep(5)

    LOG.info(
        "Processed {} repos; see output/prs.json ({}) and output/failed.json ({})".format(
            count, len(prs), len(pr_failed)
        )
    )
    LOG.info("Skipped these repos as branch was already defined: {}".format(repos_skipped))

    ts = str(datetime.datetime.now())[:19]
    with open(f"output/prs_{ts}.json", "w") as f:
        f.write(json.dumps(prs))

    with open(f"output/failed_{ts}.json", "w") as f2:
        f2.write(json.dumps(pr_failed))


if __name__ == "__main__":
    root_dir = "/Users/sarinacanelake/openedx/"
    string_to_find = "github.com/edx"
    string_to_replace = "github.com/openedx"
    main("openedx", root_dir, string_to_find, string_to_replace, exclude_private=True, interactive=True)
